import os
import streamlit as st
import openai
from dotenv import load_dotenv
from fpdf import FPDF
import base64

# --- Configuraci√≥n ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

st.title("Generador de Guiones de VSL con IA (5‚Äë7¬†min)")
st.write("Selecciona tu nicho, rellena los campos y genera un guion profesional.")

# --- Selecci√≥n de nicho ---
nicho = st.selectbox("Selecciona tu tipo de negocio/nicho:", [
    "Coach", "Terapeuta", "Consultor", "Formador", "Nutricionista",
    "Agencia", "Psic√≥logo", "Negocio SaaS", "Entrenador personal", "Otro"
])

# --- Inputs personalizados ---
nombre_producto   = st.text_input("Nombre del producto/servicio",           key="nombre_producto")
publico_objetivo  = st.text_input("P√∫blico objetivo (Ej: coaches‚Ä¶)",         key="publico_objetivo")
dolor_problema    = st.text_area ("Dolor/Problema principal que resuelve",  key="dolor_problema")
beneficios_clave  = st.text_area ("Beneficios clave (separa con comas)",     key="beneficios_clave")
precio_forma_pago = st.text_input("Precio / Forma de pago",                 key="precio")
garantia          = st.text_input("Garant√≠a ofrecida",                      key="garantia")
cta               = st.text_input("Llamada a la acci√≥n (CTA)",              key="cta")

# --- Ejemplos por nicho ---
ejemplos_nicho = {
    "Coach": "Ejemplo: 'Con mi programa de coaching, mis clientes lograron superar bloqueos personales, mejorando su rendimiento profesional y emocional...'",
    "Terapeuta": "Ejemplo: 'A trav√©s de la terapia, mis pacientes han reducido dr√°sticamente la ansiedad y el estr√©s, logrando una vida m√°s equilibrada y feliz...'",
    "Consultor": "Ejemplo: 'Gracias a mis servicios de consultor√≠a, empresas como la tuya aumentaron un 200% su rentabilidad en menos de 12 meses...'",
    "Formador": "Ejemplo: 'Mis formaciones permiten adquirir habilidades pr√°cticas y aplicables desde el primer d√≠a, aumentando tu valor profesional...'",
    "Nutricionista": "Ejemplo: 'Con mis planes personalizados, mis clientes lograron perder peso y mejorar notablemente su salud sin pasar hambre...'",
    "Agencia": "Ejemplo: 'Hemos ayudado a nuestros clientes a multiplicar sus ventas gracias a estrategias efectivas de marketing digital...'",
    "Psic√≥logo": "Ejemplo: 'Mis pacientes recuperaron la tranquilidad y el control de sus vidas, resolviendo problemas profundos con un m√©todo probado...'",
    "Negocio SaaS": "Ejemplo: 'Nuestra plataforma permiti√≥ a empresas ahorrar cientos de horas mensuales automatizando procesos repetitivos...'",
    "Entrenador personal": "Ejemplo: 'Mis clientes transformaron su cuerpo, ganaron energ√≠a y recuperaron su autoestima gracias a un entrenamiento totalmente personalizado...'",
    "Otro": ""
}

# --- Bot√≥n de generaci√≥n ---
if st.button("Generar Guion de VSL", key="btn_generar"):
    with st.spinner("Generando guion‚Ä¶"):
        prompt = f"""
Eres un copywriter profesional, experto en Video‚ÄØSales‚ÄØLetters.
Genera un guion de VSL en ESPA√ëOL de entre 600 y 800 palabras (m√°x. 7 minutos), formal, profesional y cercano.
Usa lenguaje sencillo, sin tecnicismos.

Nicho seleccionado: {nicho}
{ejemplos_nicho[nicho]}

### Estructura obligatoria:
1. Hook inicial impactante.
2. Historia personal adaptada al nicho.
3. Dolor/problema espec√≠fico del p√∫blico.
4. Presentaci√≥n del producto como soluci√≥n.
5. Beneficios clave (en bullets).
6. Testimonios espec√≠ficos (nombre y profesi√≥n).
7. Objeciones comunes + rebatidas.
8. Garant√≠a clara.
9. Llamada a la acci√≥n final.

### Datos del usuario:
- Producto: {nombre_producto}
- P√∫blico objetivo: {publico_objetivo}
- Problema principal: {dolor_problema}
- Beneficios: {beneficios_clave}
- Precio / forma de pago: {precio_forma_pago}
- Garant√≠a ofrecida: {garantia}
- Llamada a la acci√≥n: {cta}
"""

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Eres un experto copywriter de VSL."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=900,
                temperature=0.7
            )
            guion = response.choices[0].message.content

            st.subheader("Guion generado")
            st.markdown(guion)

            # --- Exportaci√≥n a PDF ---
            def crear_pdf(texto):
                pdf = FPDF()
                pdf.add_page()
                pdf.set_font("Arial", size=12)
                for linea in texto.split('\n'):
                    pdf.multi_cell(0, 10, txt=linea.encode('latin-1', 'replace').decode('latin-1'))
                return pdf.output(dest='S').encode('latin-1')

            pdf_data = crear_pdf(guion)
            b64 = base64.b64encode(pdf_data).decode('latin-1')
            href = f'<a href="data:application/octet-stream;base64,{b64}" download="guion_vsl.pdf">üì• Descargar Guion en PDF</a>'
            st.markdown(href, unsafe_allow_html=True)

        except Exception as e:
            st.error(f"Ocurri√≥ un error: {e}")
