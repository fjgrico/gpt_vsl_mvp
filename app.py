import os
import streamlit as st
import openai
from dotenv import load_dotenv
from fpdf import FPDF
from gtts import gTTS
import base64

# --- Configuraci√≥n ---
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

st.title("üé• Generador de Guiones VSL con IA (5‚Äë7‚ÄØmin)")
st.write("Completa los datos y genera un guion profesional en segundos.")

# --- Selecci√≥n de nicho ---
nicho = st.selectbox("Selecciona tu tipo de negocio/nicho:", [
    "Coach", "Terapeuta", "Consultor", "Formador", "Nutricionista",
    "Agencia", "Psic√≥logo", "Negocio SaaS", "Entrenador personal", "Otro"
])

# --- Inputs personalizados ---
nombre_producto   = st.text_input("Nombre del producto/servicio",           key="nombre_producto")
publico_objetivo  = st.text_input("P√∫blico objetivo (Ej: coaches, madres‚Ä¶)", key="publico_objetivo")
dolor_problema    = st.text_area ("Dolor o problema que resuelve",          key="dolor_problema")
beneficios_clave  = st.text_area ("Beneficios clave (separa con comas)",    key="beneficios_clave")
precio_forma_pago = st.text_input("Precio / forma de pago",                key="precio")
garantia          = st.text_input("Garant√≠a ofrecida",                     key="garantia")
cta               = st.text_input("Llamada a la acci√≥n (CTA)",             key="cta")

# --- Ejemplos por nicho ---
ejemplos_nicho = {
    "Coach": "Ejemplo: 'Con mi programa de coaching, mis clientes superan bloqueos y mejoran su vida profesional y personal...'",
    "Terapeuta": "Ejemplo: 'Mis pacientes reducen el estr√©s y la ansiedad, y recuperan su equilibrio emocional...'",
    "Consultor": "Ejemplo: 'Ayudo a negocios como el tuyo a aumentar su rentabilidad y tomar decisiones estrat√©gicas con confianza...'",
    "Formador": "Ejemplo: 'Mis formaciones pr√°cticas permiten aplicar lo aprendido desde el primer d√≠a, aumentando el rendimiento...'",
    "Nutricionista": "Ejemplo: 'Con mis planes personalizados, los clientes pierden peso sin pasar hambre y mejoran su salud...'",
    "Agencia": "Ejemplo: 'Nuestros clientes multiplican sus ventas con campa√±as bien dise√±adas y estrategias de conversi√≥n...'",
    "Psic√≥logo": "Ejemplo: 'Acompa√±o a mis pacientes a resolver traumas, mejorar su autoestima y construir relaciones sanas...'",
    "Negocio SaaS": "Ejemplo: 'Nuestra plataforma ahorra tiempo, automatiza procesos y mejora la experiencia del cliente...'",
    "Entrenador personal": "Ejemplo: 'Mis clientes transforman su f√≠sico, recuperan energ√≠a y autoestima con rutinas personalizadas...'",
    "Otro": ""
}

# --- Bot√≥n de generaci√≥n ---
if st.button("üé¨ Generar Guion de VSL", key="btn_generar"):
    with st.spinner("üß† Generando guion‚Ä¶"):
        prompt = f"""
Eres un copywriter profesional, experto en Video‚ÄØSales‚ÄØLetters.
Genera un guion de VSL en ESPA√ëOL de entre 600 y 800 palabras (m√°x. 7 minutos), con tono profesional y lenguaje sencillo.

Nicho: {nicho}
{ejemplos_nicho[nicho]}

Estructura obligatoria:
1. Hook inicial impactante.
2. Historia personal adaptada al nicho.
3. Dolor/problema espec√≠fico.
4. Presentaci√≥n del producto como soluci√≥n.
5. Beneficios clave (bullet points).
6. Testimonios con nombre y profesi√≥n.
7. Objeciones comunes + rebatidas.
8. Garant√≠a.
9. Llamada a la acci√≥n clara.

Datos personalizados:
- Producto: {nombre_producto}
- P√∫blico objetivo: {publico_objetivo}
- Problema principal: {dolor_problema}
- Beneficios: {beneficios_clave}
- Precio / forma de pago: {precio_forma_pago}
- Garant√≠a: {garantia}
- Llamada a la acci√≥n: {cta}
"""

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "Eres un experto copywriter en VSL."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=900,
                temperature=0.7
            )
            guion = response.choices[0].message.content

            st.subheader("üìÑ Guion generado")
            st.markdown(guion)

            # --- Exportaci√≥n a PDF ---
            def crear_pdf(texto):
                pdf = FPDF()
                pdf.add_page()
                pdf.set_font("Arial", size=12)
                for linea in texto.split('\n'):
                    pdf.multi_cell(0, 10, txt=linea.encode('latin-1', 'replace').decode('latin-1'))
                return pdf.output(dest='S').encode('latin-1')

            pdf_data = crear_pdf(guion)
            b64 = base64.b64encode(pdf_data).decode('latin-1')
            href = f'<a href="data:application/octet-stream;base64,{b64}" download="guion_vsl.pdf">üì• Descargar Guion en PDF</a>'
            st.markdown(href, unsafe_allow_html=True)

            # --- Narraci√≥n autom√°tica del guion con gTTS ---
            try:
                tts = gTTS(text=guion, lang='es')
                tts.save("guion_vsl.mp3")

                with open("guion_vsl.mp3", "rb") as audio_file:
                    audio_bytes = audio_file.read()

                st.subheader("üéôÔ∏è Escucha tu guion narrado")
                st.audio(audio_bytes, format="audio/mp3")

                st.download_button(
                    label="üéß Descargar narraci√≥n en MP3",
                    data=audio_bytes,
                    file_name="guion_vsl.mp3",
                    mime="audio/mpeg"
                )

            except Exception as e:
                st.warning("No se pudo generar la narraci√≥n del guion.")
                st.text(str(e))

        except Exception as e:
            st.error(f"Ocurri√≥ un error al generar el guion: {e}")
